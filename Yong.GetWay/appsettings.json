{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "Routes": [
    {
      "DownstreamPathTemplate": "/{url}", //下游路径模板
      "DownstreamScheme": "http", //下游方案
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "9000"
        }
      ], //下游主机和端口
      "UpstreamPathTemplate": "/auth/{url}", //上游路径模板
      "UpstreamHttpMethod": [], //上游请求方法,可以设置特定的 HTTP 方法列表或设置空列表以允许其中任何方法
      //鉴权
      "ServiceName": "Id4Services", //请求服务名称
      "LoadBalancerOptions": {
        "Type": "LeastConnection" //负载均衡算法：目前 Ocelot 有RoundRobin 和LeastConnection算法
      },
      "RateLimitOptions": {
        "ClientWhitelist": [], // 白名单
        "EnableRateLimiting": true, // 是否限流
        "Period": "10s", // 1s,4m,1h,1d
        "PeriodTimespan": 5, // 多少秒之后客户端可以重试
        "Limit": 5 // 一个时间周期最多可以请求的次数
      },
      "QoSOptions": {
        "ExceptionsAllowedBeforeBreaking": 2,
        "DurationOfBreak": 5000,
        "TimeoutValue": 5000
      },
      "FileCacheOptions": { //缓存设置
        "TtlSeconds": 10, //ttl秒被设置为10，这意味着缓存将在10秒后过期。(同一地址就返回同一结果)
        "Region": "" //缓存region ，可以使用administrator API清除
      }
    },
    {
      "DownstreamPathTemplate": "/api/Oauth/{url}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5003"
        },
        {
          "Host": "localhost",
          "Port": "50031"
        }
      ],
      "UpstreamPathTemplate": "/proxy/Oauth/{url}",
      "UpstreamHttpMethod": []
    },

    {
      "DownstreamPathTemplate": "/api/{url}", //下游路径模板
      "DownstreamScheme": "http", //下游方案
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5003"
        },
        {
          "Host": "localhost",
          "Port": "50031"
        }
      ], //下游主机和端口
      "UpstreamPathTemplate": "/proxy/user/{url}", //上游路径模板
      "UpstreamHttpMethod": [], //上游请求方法,可以设置特定的 HTTP 方法列表或设置空列表以允许其中任何方法
      //鉴权
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "auth1", //指定一个key
        "AllowedScopes": [ "UserServices_scope" ] //id4的作用域名称
      },
      "ServiceName": "UserServices", //请求服务名称
      "LoadBalancerOptions": {
        "Type": "RoundRobin" //负载均衡算法：目前 Ocelot 有RoundRobin 和LeastConnection算法
      },
      "RateLimitOptions": {
        "ClientWhitelist": [], // 白名单
        "EnableRateLimiting": true, // 是否限流
        "Period": "10s", // 1s,4m,1h,1d
        "PeriodTimespan": 5, // 多少秒之后客户端可以重试
        "Limit": 10 // 一个时间周期最多可以请求的次数
      }
      //"QoSOptions": {
      //  "ExceptionsAllowedBeforeBreaking": 2,
      //  "DurationOfBreak": 5000,
      //  "TimeoutValue": 5000
      //},
      //"FileCacheOptions": { //缓存设置
      //  "TtlSeconds": 10, //ttl秒被设置为10，这意味着缓存将在10秒后过期。(同一地址就返回同一结果)
      //  "Region": "" //缓存region ，可以使用administrator API清除
      //}
    },

    {
      "DownstreamPathTemplate": "/api/{url}", //下游路径模板
      "DownstreamScheme": "http", //下游方案
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5002"
        }
      ], //下游主机和端口
      "UpstreamPathTemplate": "/proxy/page/{url}", //上游路径模板
      "UpstreamHttpMethod": [], //上游请求方法,可以设置特定的 HTTP 方法列表或设置空列表以允许其中任何方法
      //鉴权
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "auth2", //指定一个key
        "AllowedScopes": [ "PageServices_scope" ] //id4的作用域名称
      },
      "ServiceName": "PageServices", //请求服务名称
      "LoadBalancerOptions": {
        "Type": "LeastConnection" //负载均衡算法：目前 Ocelot 有RoundRobin 和LeastConnection算法
      },
      "RateLimitOptions": {
        "ClientWhitelist": [], // 白名单
        "EnableRateLimiting": true, // 是否限流
        "Period": "10s", // 1s,4m,1h,1d
        "PeriodTimespan": 5, // 多少秒之后客户端可以重试
        "Limit": 50 // 一个时间周期最多可以请求的次数
      }
      //"QoSOptions": {
      //  "ExceptionsAllowedBeforeBreaking": 2,
      //  "DurationOfBreak": 5000,
      //  "TimeoutValue": 10000
      //},
      //"FileCacheOptions": { //缓存设置
      //  "TtlSeconds": 5, //ttl秒被设置为10，这意味着缓存将在10秒后过期。(同一地址就返回同一结果)
      //  "Region": "" //缓存region ，可以使用administrator API清除
      //}
    },
    {
      "DownstreamPathTemplate": "/api/{url}", //下游路径模板
      "DownstreamScheme": "http", //下游方案
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "9002"
        }
      ], //下游主机和端口
      "UpstreamPathTemplate": "/proxy/Im/{url}", //上游路径模板
      "UpstreamHttpMethod": [], //上游请求方法,可以设置特定的 HTTP 方法列表或设置空列表以允许其中任何方法
      //鉴权
      //"AuthenticationOptions": {
      //  "AuthenticationProviderKey": "auth3", //指定一个key
      //  "AllowedScopes": [ "ImServices_scope" ] //id4的作用域名称
      //},
      "ServiceName": "IMServices", //请求服务名称
      "LoadBalancerOptions": {
        "Type": "LeastConnection" //负载均衡算法：目前 Ocelot 有RoundRobin 和LeastConnection算法
      },
      "RateLimitOptions": {
        "ClientWhitelist": [], // 白名单
        "EnableRateLimiting": true, // 是否限流
        "Period": "10s", // 1s,4m,1h,1d
        "PeriodTimespan": 5, // 多少秒之后客户端可以重试
        "Limit": 5 // 一个时间周期最多可以请求的次数
      }
      //"QoSOptions": {
      //  "ExceptionsAllowedBeforeBreaking": 2,
      //  "DurationOfBreak": 5000,
      //  "TimeoutValue": 5000
      //},
      //"FileCacheOptions": { //缓存设置
      //  "TtlSeconds": 10, //ttl秒被设置为10，这意味着缓存将在10秒后过期。(同一地址就返回同一结果)
      //  "Region": "" //缓存region ，可以使用administrator API清除
      //}
    },
    {
      "DownstreamPathTemplate": "/api/{url}", //下游路径模板
      "DownstreamScheme": "http", //下游方案
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5004"
        }
      ], //下游主机和端口
      "UpstreamPathTemplate": "/proxy/admin/{url}", //上游路径模板
      "UpstreamHttpMethod": [], //上游请求方法,可以设置特定的 HTTP 方法列表或设置空列表以允许其中任何方法
      //鉴权
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "auth_admin", //指定一个key
        "AllowedScopes": [ "AdminServices_scope" ] //id4的作用域名称
      },
      "ServiceName": "AdminServices", //请求服务名称
      "LoadBalancerOptions": {
        "Type": "RoundRobin" //负载均衡算法：目前 Ocelot 有RoundRobin 和LeastConnection算法
      },
      "RateLimitOptions": {
        "ClientWhitelist": [], // 白名单
        "EnableRateLimiting": true, // 是否限流
        "Period": "10s", // 1s,4m,1h,1d
        "PeriodTimespan": 60, // 多少秒之后客户端可以重试
        "Limit": 100 // 一个时间周期最多可以请求的次数
      }
      //"QoSOptions": {
      //  "ExceptionsAllowedBeforeBreaking": 2,
      //  "DurationOfBreak": 5000,
      //  "TimeoutValue": 5000
      //},
      //"FileCacheOptions": { //缓存设置
      //  "TtlSeconds": 10, //ttl秒被设置为10，这意味着缓存将在10秒后过期。(同一地址就返回同一结果)
      //  "Region": "" //缓存region ，可以使用administrator API清除
      //}
    },
    {
      "DownstreamPathTemplate": "/api/{url}", //下游路径模板
      "DownstreamScheme": "http", //下游方案
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": "5004"
        }
      ], //下游主机和端口
      "UpstreamPathTemplate": "/proxy/merchants/{url}", //上游路径模板
      "UpstreamHttpMethod": [], //上游请求方法,可以设置特定的 HTTP 方法列表或设置空列表以允许其中任何方法
      //鉴权
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "auth_merchants", //指定一个key
        "AllowedScopes": [ "MerchantsServices_scope" ] //id4的作用域名称
      },
      "ServiceName": "MerchantsServices", //请求服务名称
      "LoadBalancerOptions": {
        "Type": "RoundRobin" //负载均衡算法：目前 Ocelot 有RoundRobin 和LeastConnection算法
      },
      "RateLimitOptions": {
        "ClientWhitelist": [], // 白名单
        "EnableRateLimiting": true, // 是否限流
        "Period": "10s", // 1s,4m,1h,1d
        "PeriodTimespan": 60, // 多少秒之后客户端可以重试
        "Limit": 100 // 一个时间周期最多可以请求的次数
      }
      //"QoSOptions": {
      //  "ExceptionsAllowedBeforeBreaking": 2,
      //  "DurationOfBreak": 5000,
      //  "TimeoutValue": 5000
      //},
      //"FileCacheOptions": { //缓存设置
      //  "TtlSeconds": 10, //ttl秒被设置为10，这意味着缓存将在10秒后过期。(同一地址就返回同一结果)
      //  "Region": "" //缓存region ，可以使用administrator API清除
      //}
    }
  ],

  //限流:限制单位时间内请求数量(防爬虫,防ddos等)

  "GlobalConfiguration": {
    "BaseUrl": "http://localhost:5001", //进行标头查找和替换以及某些管理配置
    "RateLimitOptions": { //超过限流
      "HttpStatusCode": 999 //自定义返回内容
    },
    "ServiceDiscoveryProvider": {
      "Type": "Nacos"
    }
  },
  "nacos": {
    "EndPoint": "",
    "ServerAddresses": [ "http://119.29.202.87:8848/" ], // nacos服务端地址
    "DefaultTimeOut": 15000,
    "Namespace": "", // 服务注册到的命名空间id
    "ListenInterval": 1000,
    "ServiceName": "GetWayServices", //服务名称
    "GroupName": "DEFAULT_GROUP", //服务分组
    "ClusterName": "DEFAULT",
    "Ip": "",
    "PreferredNetworks": "", // select an IP that matches the prefix as the service registration IP
    "Port": 0,
    "Weight": 100, // 权重
    "RegisterEnabled": true,
    "InstanceEnabled": true,
    "Ephemeral": true,
    "Secure": false,
    "AccessKey": "",
    "SecretKey": "",
    //"UserName": "nacos",
    //"Password": "nacos",
    "ConfigUseRpc": false, // 为true时，通过 gRPC 去和 nacos server 交互，nacos 2.x版本要设
    "NamingUseRpc": false, // 为true时，通过 gRPC 去和 nacos server 交互, nacos 2.x版本要设
    "NamingLoadCacheAtStart": "",
    "LBStrategy": "WeightRandom", //  WeightRandom WeightRoundRobin
    "Metadata": {
      "aa": "bb",
      "cc": "dd"
    }
  },
  "Urls": "http://*:5001"
}
